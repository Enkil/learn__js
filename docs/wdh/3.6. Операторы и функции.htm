<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>


<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<meta name="Author" content="Юрий Лукач">
<meta name="Description" content="Справочник Веб-разработчика: современные технологии WWW">
<meta name="Keywords" content="WWW, Веб, разработка, программирование, HTML, DHTML, CSS, Java, JavaScript, CGI, PERL, ASP, XML, XSL, VML, VRML"><title>WDH: JavaScript - Операторы и функции</title>

<link rel="Prev" href="http://wdh.suncloud.ru/js05.htm" title="Регулярные выражения">
<link rel="Next" href="http://wdh.suncloud.ru/js07.htm" title="Использование объектов">
<link rel="Copyright" href="http://wdh.suncloud.ru/cpyright.htm" title="Сведения об авторских правах">
<link rev="Made" href="mailto:yury@suncloud.ru" title="Обратная связь">
<script type="text/javascript" src="3.6.%20%CE%EF%E5%F0%E0%F2%EE%F0%FB%20%E8%20%F4%F3%ED%EA%F6%E8%E8_files/load.js"></script>
<script type="text/javascript" src="3.6.%20%CE%EF%E5%F0%E0%F2%EE%F0%FB%20%E8%20%F4%F3%ED%EA%F6%E8%E8_files/link.js"></script><link rel="stylesheet" type="text/css" href="3.6.%20%CE%EF%E5%F0%E0%F2%EE%F0%FB%20%E8%20%F4%F3%ED%EA%F6%E8%E8_files/nn5.css"></head><body onload="initDoc(); addBanner(true)">
<table style="margin: 0pt;" border="0" cellpadding="0" cellspacing="0" width="100%">
  <tbody><tr><td><div id="divHeader"><p style="margin: 0pt; text-indent: 0pt; text-align: center; font-family: arial,sans-serif; color: rgb(0, 0, 204);">Ю. Лукач «Справочник Веб-разработчика»</p><hr size="2"><table style="margin: 0pt;" border="0" cellpadding="0" cellspacing="0" height="24" width="100%"><tbody><tr><td align="left" width="33%"><a href="http://wdh.suncloud.ru/js05.htm"><img name="imglefta" src="3.6.%20%CE%EF%E5%F0%E0%F2%EE%F0%FB%20%E8%20%F4%F3%ED%EA%F6%E8%E8_files/nnleft.gif" alt="" title="Регулярные выражения" onmouseover="showSelected(this)" onmouseout="showNormal(this)" border="0"></a></td><td align="center" width="34%"><a href="http://wdh.suncloud.ru/contents.htm"><img name="imgupa" src="3.6.%20%CE%EF%E5%F0%E0%F2%EE%F0%FB%20%E8%20%F4%F3%ED%EA%F6%E8%E8_files/nnup.gif" alt="" title="Содержание" onmouseover="showSelected(this)" onmouseout="showNormal(this)" border="0"></a></td><td align="right" width="33%"><a href="http://wdh.suncloud.ru/js07.htm"><img name="imgrighta" src="3.6.%20%CE%EF%E5%F0%E0%F2%EE%F0%FB%20%E8%20%F4%F3%ED%EA%F6%E8%E8_files/nnright.gif" alt="" title="Использование объектов" onmouseover="showSelected(this)" onmouseout="showNormal(this)" border="0"></a></td></tr></tbody></table><hr size="2"></div></td></tr>
  <tr><td id="tdBanner" style="text-align: center;"><script type="text/javascript">addBanner(false);</script><div class="banner"><a href="http://ad.tbn.ru/bb.cgi?cmd=go&amp;pubid=160692&amp;pg=2&amp;vbn=188&amp;num=1&amp;w=468&amp;h=60&amp;nocache=5141" target="_blank"><img src="3.6.%20%CE%EF%E5%F0%E0%F2%EE%F0%FB%20%E8%20%F4%F3%ED%EA%F6%E8%E8_files/bb.gif" alt="TBN.ru - СЕТЬ, ЖИВУЩАЯ ПО ПРАВИЛАМ" border="0" height="60" width="468"></a></div></td></tr>
  <tr><td>

      <h2><a name="ref36">Глава 3.6. Операторы и функции</a></h2>

      <h3><a name="ref361">3.6.1. Операторы JavaScript</a></h3>

      <p>Управление последовательностью действий в ходе выполнения сценария осуществляется с помощью
        <em>операторов</em>. JavaScript содержит стандартный набор операторов, унаследованный от языков
        C++ и Java, а именно:</p>

      <ul>
        <li>условный оператор <a href="#ref362"><strong>if…else</strong></a>;</li>
        <li>оператор выбора <a href="#ref363"><strong>switch</strong></a>;</li>
        <li>операторы цикла <a href="#ref3641"><strong>for</strong></a>, <a href="#ref3642"><strong>while</strong></a>, <a href="#ref3643"><strong>do…while</strong></a>,
          <a href="#ref3645"><strong>break</strong></a> и <a href="#ref3646"><strong>continue</strong></a>;</li>
        <li>оператор итерации <a href="#ref365"><strong>for…in</strong></a>;</li>
        <li>оператор указания объекта <a href="#ref366"><strong>with</strong></a>;</li>
        <li>операторы обработки исключений <a href="#ref3672"><strong>try…catch</strong></a> и
          <a href="#ref3673"><strong>throw</strong></a>;</li>
        <li>операторы декларации функций <a href="#ref3681"><strong>function</strong></a> и возврата
          из функции <strong><a href="#ref3684">return</a></strong>.</li>
      </ul>

      <p>Следующие операторы описаны в других разделах справочника:</p>

      <ul>
        <li><a href="http://wdh.suncloud.ru/js02.htm#empty-stat">пустой оператор</a>;</li>
        <li>оператор декларации переменных <strong><a href="http://wdh.suncloud.ru/js02.htm#ref3251">var</a></strong>.</li>
      </ul>

      <p>Любое выражение JavaScript также является оператором.</p>

      <h3><a name="ref362">3.6.2. Условный оператор</a></h3>

      <p>Условный оператор <strong>if…else</strong> позволяет проверить определенное условие и,
        в зависимости от его истинности, выполнить ту или иную последовательность операторов. Он имеет
        две формы:</p>

<pre class="syntax"><strong>if</strong> (<i>условие</i>) <i>оператор1</i>
<strong>if</strong> (<i>условие</i>) <i>оператор1</i> <strong>else</strong> <i>оператор2</i></pre>

      <p>Здесь <em>условие</em>&nbsp;— это любое выражение, значение которого может быть преобразовано
        к логическому типу, <em>оператор1</em> и <em>оператор2</em>&nbsp;— любые группы операторов
        JavaScript; если эти группы содержат более одного оператора, то они должны быть заключены в
        фигурные скобки <tt>{}</tt>.</p>

      <p>Первая форма оператора означает, что если значение <em>условия</em> истинно, то выполняются
        <em>операторы1</em>; если оно ложно, то управление передается оператору, следующему за <strong>if</strong>.</p>

      <p>Вторая форма оператора означает, что если значение <em>условия</em> истинно, то выполняются
        <em>операторы1</em>; если оно ложно, то выполняются <em>операторы2</em>.</p>

      <p>Пример использования условного оператора в теле функции, возвращающей наибольшее из трех чисел:</p>

      <div class="code">
<pre class="code">function maxValue(x, y, z) {
  if (x &gt;= y) {
    if (x &gt;= z)
      return x;
    else
      return z;
  }
  else {
    if (y &gt;= z)
      return y;
    else
      return z;
  }
}</pre>
      </div>

      <h3><a name="ref363">3.6.3. Оператор выбора</a></h3>

      <p>Оператор выбора <strong>switch</strong> выполняет ту или иную последовательность операторов
        в зависимости от значения определенного выражения. Он имеет вид:</p>

<pre class="syntax"><strong>switch</strong> (<i>выражение</i>) {
   <strong>case</strong> <i>значение</i>:
     <i>операторы</i>
     <strong>break</strong>;
   <strong>case</strong> <i>значение</i>:
    <i> операторы</i>
     <strong>break</strong>;
   ...
   <strong>default</strong>:
     <i>операторы</i>
}</pre>

      <p>Здесь <em>выражение</em>&nbsp;— это любое выражение, <em>значение</em>&nbsp;— это
        возможное значение выражения, а <em>операторы</em>&nbsp;— любые группы операторов JavaScript.</p>

      <p>Оператор выбора сначала вычисляет значение <em>выражения</em>, а затем проверяет, нет ли этого
        значения в одной из меток <strong>case </strong><em>значение</em>. Если такая метка есть, то
        выполняются <em>операторы</em>, следующие за ней; если нет, то выполняются <em>операторы</em>,
        следующие за меткой <strong>default</strong> (если она отсутствует, то управление передается
        оператору, следующему за <strong>switch</strong>).</p>

      <p>Необязательный оператор <a href="#ref3645"><strong>break</strong></a> указывает, что после
        выполнения <em>операторов</em> управление передается оператору, следующему за <strong>switch</strong>.
        Если <strong>break</strong> отсутствует, то после выполнения <em>операторов</em> начинают выполняться
        <em>операторы</em>, стоящие после следующей метки <strong>case</strong> (управление как бы "проваливается"
        в следующую метку).</p>

      <p>В следующем примере значение переменной <tt>length</tt> преобразуется в метры в зависимости
        от начальной единицы измерений, заданной в переменной <tt>str</tt>. Обратите внимание, что после
        <tt>case "м"</tt> нет оператора <strong>break</strong>; в данном случае это означает,
        что эта метка и метка <strong>default</strong> обрабатываются одинаково, а именно значение
        переменной <tt>length</tt> не изменяется.</p>

      <div class="code">
<pre class="code">var str = "см";
var length = 25;
switch (str) {
  case "км":
    length *= 1000;
    break;
  case "см":
    length /= 100;
    break;
  case "м":
  default:
    break;
}</pre>
      </div>

      <h3><a name="ref364">3.6.4. Операторы цикла</a></h3>

      <p><em>Цикл</em>&nbsp;— это последовательность операторов, выполнение которой повторяется
        до тех пор, пока определенное условие не станет ложным. JavaScript содержит три оператора цикла:
        <a href="#ref3641"><strong>for</strong></a>, <a href="#ref3642"><strong>while</strong></a> и <a href="#ref3643"><strong>do…while</strong></a>,
        а также операторы <a href="#ref3645"><strong>break</strong></a> и <a href="#ref3646"><strong>continue</strong></a>, которые
        используются внутри циклов.</p>

      <p>Близок к операторам цикла и оператор итерации <a href="#ref365"><strong>for…in</strong></a>,
        используемый при работе с объектами.</p>

      <h4><a name="ref3641">3.6.4.1. Оператор for</a></h4>

      <p>Оператор цикла <strong>for</strong> имеет вид:</p>

<pre class="syntax"><strong>for</strong> (<i>инициализация</i>; <em>условие</em>; <em>изменение</em>) <i>оператор</i></pre>

      <p>Здесь <em>инициализация</em>&nbsp;и <em>изменение</em> — это любое выражения, <em>условие</em>&nbsp;—
        любое выражение, значение которого может быть преобразовано к логическому типу, <em>оператор</em>
        — любая группа операторов JavaScript; если эти группа содержит более одного оператора,
        то она должны быть заключена в фигурные скобки <tt>{}</tt>. <em>Инициализация</em> может содержать
        <a href="http://wdh.suncloud.ru/js02.htm#ref3251">декларацию переменной</a>.</p>

      <p>Оператор <strong>for </strong>выполняется следующим образом:</p>

      <ol>
        <li>Выполняется выражение <em>инициализация</em> (обычно это выражение инициализирует счетчик
          или счетчики цикла).</li>
        <li>Вычисляется значение выражения <em>условие</em>. Если оно ложно, то управление передается
          оператору, следующему за данным оператором.</li>
        <li>Выполняется <em>оператор</em>.</li>
        <li>Выполняется выражение <em>изменение</em> (обычно это выражение увеличивает или уменьшает
          счетчик или счетчики цикла) и управление передается этапу 2.</li>
      </ol>

      <p>Данный оператор обычно используется в тех случаях, когда количество повторений цикла известно
        заранее. Например, следующая функция обнуляет все элементы массива, переданного ей в качестве
        аргумента:</p>

      <div class="code">
<pre class="code">function initArray(a) {
  for (var i = 0; i &lt; a.length; i++)
    a[i] = 0;
}</pre>
      </div>

      <h4><a name="ref3642">3.6.4.2. Оператор while</a></h4>

      <p>Оператор цикла <strong>while</strong> имеет вид:</p>

<pre class="syntax"><strong>while</strong> (<em>условие</em>) <i>оператор</i></pre>

      <p>Здесь <em>условие</em>&nbsp;— любое выражение, значение которого может быть преобразовано
        к логическому типу, <em>оператор</em> - любая группа операторов JavaScript; если эти группа
        содержит более одного оператора, то она должны быть заключена в фигурные скобки <tt>{}</tt>.</p>

      <p>Оператор <strong>while </strong>выполняется следующим образом:</p>

      <ol>
        <li>Вычисляется значение выражения <em>условие</em>. Если оно ложно, то управление передается
          оператору, следующему за данным оператором.</li>
        <li>Выполняется <em>оператор</em> и управление передается этапу 1.</li>
      </ol>

      <p>При использовании данного оператора необходимо убедиться, что рано или поздно <em>условие</em>
        станет ложным, т.&nbsp;к. иначе сценарий войдет в бесконечный цикл, например:</p>

      <div class="code">
<pre class="code">while (true)
  document.write("Привет всем!");</pre>
      </div>

      <h4><a name="ref3643">3.6.4.3. Оператор do…while</a></h4>

      <p>Оператор цикла <strong>do…while</strong> имеет вид:</p>

<pre class="syntax"><strong>do</strong> <i>оператор</i> <strong>while</strong> (<em>условие</em>)</pre>

      <p>Здесь <em>условие</em>&nbsp;— любое выражение, значение которого может быть преобразовано
        к логическому типу, <em>оператор</em> - любая группа операторов JavaScript; если эти группа
        содержит более одного оператора, то она должны быть заключена в фигурные скобки <tt>{}</tt>.</p>

      <p>Оператор <strong>do … while </strong>выполняется следующим образом:</p>

      <ol>
        <li>Выполняется <em>оператор</em>.</li>
        <li>Вычисляется значение выражения <em>условие</em>. Если оно ложно, то управление передается
          оператору, следующему за данным оператором.</li>
        <li>Управление передается этапу 1.</li>
      </ol>

      <p>Этот оператор отличается от оператора <a href="#ref3642"><strong>while</strong></a> тем, что
        цикл обязательно выполняется хотя бы раз. Пример:</p>

      <div class="code">
<pre class="code">var i = 0;
do
  document.write(i++);
while (i &lt; 10);</pre>
      </div>

      <h4><a name="ref3644">3.6.4.4. Метки операторов</a></h4>

      <p>Любой оператор или блок операторов в сценарии на языке JavaScript может иметь любое количество
        <em>меток</em>. Метки используются операторами <a href="#ref3645"><strong>break</strong></a>
        и <a href="#ref3646"><strong>continue</strong></a> для указания того, к какому оператору они
        относятся. Помеченный оператор имеет вид:</p>

<pre class="syntax"><em>метка</em>:
 <i>оператор</i></pre>

      <p>В качестве метки может использоваться любой идентификатор, который не является <a href="http://wdh.suncloud.ru/js02.htm#ref323">зарезервированным
        словом</a>.</p>

      <p>Хотя в современном программировании использование меток считается дурным тоном, в некоторых
        случаях их применение существенно упрощает логику программы. Чаще всего это происходит, когда
        метки используются для передачи управления из глубоко вложенного цикла к внешнему.</p>

      <h4><a name="ref3645">3.6.4.5. Оператор break</a></h4>

      <p>Оператор <strong>break</strong> прерывает выполнение текущего цикла, оператора <a href="#ref363"><strong>switch</strong></a>
        или помеченный оператора и передает управление оператору, следующему за прерванным. Этот оператор
        может употребляться только внутри циклов <a href="#ref3642"><strong>while</strong></a>, <a href="#ref3643"><strong>do…while</strong></a>,
        <a href="#ref3641"><strong>for</strong></a> или <a href="#ref365"><strong>for…in</strong></a>,
        а также внутри оператора <a href="#ref363"><strong>switch</strong></a>. Он имеет две формы:</p>

<pre class="syntax"><strong>break
break</strong> метка</pre>

      <p>Первая форма оператора прерывает выполнение самого внутреннего из циклов или операторов <a href="#ref363"><strong>switch</strong></a>. Вторая форма оператора прерывает выполнение оператора с
        заданной меткой.</p>

      <p>Пример оператора <strong>break</strong> в теле функции, возвращающей номер элемента массива,
        содержащего заданное значение:</p>

      <div class="code">
<pre class="code">function findValue(a, theValue) {
  for (var i = 0; i &lt; a.length; i++) {
    if (a[i] == theValue)
      break;
  }
  return i;
}</pre>
      </div>

      <h4><a name="ref3646">3.6.4.6. Оператор continue</a></h4>

      <p>Оператор <strong>continue</strong> завершает текущую итерацию текущего цикла или цикла, помеченного
        соответствующей меткой, и начинает новую итерацию. Этот оператор может употребляться только
        внутри циклов <a href="#ref3642"><strong>while</strong></a>, <a href="#ref3643"><strong>do…while</strong></a>, <a href="#ref3641"><strong>for</strong></a> или
        <a href="#ref365"><strong>for…in</strong></a>. Он имеет две формы:</p>

<pre class="syntax"><strong>continue
continue</strong> метка</pre>

      <p>Первая форма оператора завершает текущую итерацию самого внутреннего из циклов. Вторая форма
        оператора завершает текущую итерацию оператора с заданной меткой. При этом переход к следующей
        итерации цикла происходит следующим образом:</p>

      <ul>
        <li>циклы <a href="#ref3642"><strong>while</strong></a> и <strong><a href="#ref3643">do…while</a></strong>
          проверяют условие цикла и, если оно истинно, начинают очередное выполнение цикла;</li>
        <li>цикл <a href="#ref3641"><strong>for</strong></a> выполняет выражение <em>изменение</em>,
          проверяет условие цикла и, если оно истинно, начинает очередное выполнение цикла;</li>
        <li>цикл <a href="#ref365"><strong>for…in</strong></a> переходит к следующему полю переменной
          и начинает очередное выполнение цикла.</li>
      </ul>

      <p>В следующем примере к переменной <tt>n</tt> последовательно добавляются значения 1, 2, 4 и
        5:</p>

      <div class="code">
<pre class="code">var i = 0;
var n = 0;
while (i &lt; 5) {
  i++;
  if (i == 3)
    continue;
  n += i;
}</pre>
      </div>

      <h3><a name="ref365">3.6.5. Оператор for…in</a></h3>

      <p>Оператор <strong>for…in</strong> выполняет заданные действия для каждого свойства объекта
        или для каждого элемента массива. Он имеет вид:</p>

<pre class="syntax"><strong>for</strong> (<i>переменная</i> <strong>in</strong> <em>выражение</em>) <i>оператор</i></pre>

      <p>Здесь <em>переменная</em> — это <a href="http://wdh.suncloud.ru/js02.htm#ref3251">декларация переменной</a>,
        <em>выражение</em>&nbsp;— любое выражение, значением которого является объект или массив,
        <em>оператор</em> — любая группа операторов JavaScript; если эти группа содержит более
        одного оператора, то она должны быть заключена в фигурные скобки <tt>{}</tt>.</p>

      <p>Оператор <strong>for…in</strong> выполняется следующим образом:</p>

      <ol>
        <li><em>Переменной</em> присваивается имя очередного свойства объекта или очередного элемента
          массива (это зависит от того, является значением <em>выражения</em> объект или массив).</li>
        <li>Выполняется <em>оператор</em>.</li>
        <li>Управление передается этапу 1.</li>
      </ol>

      <p>При итерации массива переменной последовательно присваиваются значение первого, второго, ...,
        последнего элемента массива. Однако, при итерации свойств объекта невозможно предсказать, в
        каком порядке они будут присваиваться переменной: этот оператор гарантирует только то, что все
        они будут просмотрены.</p>

      <p>Следующий сценарий создает новый объект <tt>ob</tt>, а затем последовательно выводит все его
        свойства на экран обозревателя:</p>

      <div class="code">
<pre class="code">var ob = {"а" : "Архангельск", "б" : "Баку", "в" : "Воронеж"};
for (var key in ob)
  document.write(key + ": " + ob[key] + "&lt;BR&gt;");</pre>
      </div>

      <p>На экране появится текст</p>

      <pre><samp>а: Архангельск
б: Баку
в: Воронеж</samp></pre>

      <h3><a name="ref366">3.6.6. Оператор with</a></h3>

      <p>Оператор <strong>with</strong> задает имя объекта по умолчанию. Он имеет вид:</p>

<pre class="syntax"><strong>with</strong> (<em>выражение</em>) <i>оператор</i></pre>

      <p>Здесь <em>выражение</em>&nbsp;— любое выражение, значением которого является объект, <em>оператор</em>
        — любая группа операторов JavaScript; если эти группа содержит более одного оператора,
        то она должны быть заключена в фигурные скобки <tt>{}</tt>.</p>

      <p>Этот оператор действует следующим образом. Для каждого идентификатора в <em>операторе</em>
        исполняющая система проверяет, не является ли он именем свойства объекта, заданного по умолчанию.
        Если да, то этот идентификатор считается именем свойства, если же нет, то именем переменной.</p>

      <p>Оператор <strong>with</strong> используется для сокращения размера программного кода и ускорения
        доступа к свойствам объектов. Например, для доступа к математическим функциям мы должны каждый
        раз указывать имя объекта <strong>Math</strong>:</p>

      <div class="code">
<pre class="code">x = Math.cos(Math.PI / 2) + Math.sin(Math.LN10);
y = Math.tan(2 * Math.E);</pre>
      </div>

      <p>С помощью оператора <strong>with</strong> этот фрагмент сценария можно существенно укоротить:</p>

      <div class="code">
<pre class="code">with (Math) {
  x = cos(PI / 2) + sin(LN10);
  y = tan(2 * E);
}</pre>
      </div>

      <p class="note"><strong>Примечание</strong>. Оператор <strong>with</strong> может применяться
        только к существующим свойствам и методам объекта. Попытка создания нового свойства или метода
        с его помощью вызовет ошибку.</p>

      <h3><a name="ref367">3.6.7. Обработка исключений</a></h3>

      <h4><a name="ref3671">3.6.7.1. Понятие исключения</a></h4>

      <p>В процессе исполнения сценария возможно возникновение неустранимых ошибок, называемых <em>исключениями</em>.
        Примерами исключений являются обращение к несуществующему объекту или невозможность преобразования
        значения к заданному типу. Подробнее о реализации исключений см. описание <a href="http://wdh.suncloud.ru/js12.htm#ref3121">объектов
        <strong>Error</strong></a>.</p>

      <p>Операторы, описанные в этом разделе, предназначены для обработки исключений, возникающих в
        ходе исполнения сценария, и генерации собственных исключений.</p>

      <h4><a name="ref3672">3.6.7.2. Оператор try…catch</a></h4>

      <p>Оператор <strong>try…catch</strong> используется в тех фрагментах сценария, где может
        возникнуть исключение, для его обработки. Он имеет вид:</p>

<pre class="syntax"><strong>try</strong> {
  <em>оператор1</em>
}
<strong>catch</strong> (<em>исключение</em>) {
  <i>оператор2
}</i></pre>

      <p>Здесь <em>исключение</em>&nbsp;— любое имя переменной, а <em>оператор1</em> и <em>оператор2</em>&nbsp;—
        любые группы операторов JavaScript, заключенные в фигурные скобки <tt>{}</tt>.</p>

      <p><em>Оператор1</em> содержит программный код, в котором возможно возникновение исключения. Если
        исключение не возникло, то после исполнения <em>оператора1</em> управление передается обычным
        образом оператору, следующему за <strong>try…catch</strong>. Если же оно возникло, то информация
        об исключении заносится в локальную переменную <em>исключение</em>, и управление передается
        <em>оператору2</em>, который должен содержать код обработки этого исключения.</p>

      <p>Если возникшее исключение не может быть здесь обработано, то <em>оператор2</em> должен содержать
        оператор <a href="#ref3673"><strong>throw</strong></a> для передачи исключения обработчику исключений
        более высокого уровня. Пример использования этого оператора приведен в следующем разделе.</p>

      <p><img src="3.6.%20%CE%EF%E5%F0%E0%F2%EE%F0%FB%20%E8%20%F4%F3%ED%EA%F6%E8%E8_files/plus.gif" alt="WDH+"> См. также
        <a target="_blank" href="http://go.suncloud.ru/to.asp?workshop/extreme/trycatch/trycatch.htm">WDH+: Оператор try…catch в IE4</a>.</p>

      <h4><a name="ref3673">3.6.7.3. Оператор throw</a></h4>

      <p>Оператор <strong>throw</strong> генерирует исключение, которое может быть обработано оператором
        <a href="#ref3672"><strong>try…catch</strong></a>. Он имеет вид:</p>

<pre class="syntax"><strong>throw</strong> <em>исключение</em></pre>

      <p>где <em>исключение</em>&nbsp;— любое выражение.</p>

      <p>Значение выражения <em>исключение</em> присваивается локальной переменной, указанной в операторе
        <strong>catch</strong>. Пример генерации исключения и его обработки:</p>

      <div class="code">
<pre class="code">function getMonthName(month) {
  month = month - 1; // Переводим month в индекс массива (1=январь, 12=декабрь)
  var months=new Array("январь","февраль","март","апрель","май","июнь","июль",
     "август","сентябрь","октябрь","ноябрь","декабрь");
  if (months[month] != null)
    return months[month];
  else
    throw "Неверный месяц";
}

try {
  monthName = getMonthName(myMonth); // возможно исключение
}
catch (e) {
  monthName="неизвестно";
}
document.write(monthName);</pre>
      </div>

      <h3><a name="ref368">3.6.8. Функции</a></h3>

      <h4><a name="ref3681">3.6.8.1. Декларация функции</a></h4>

      <p><em>Функции</em> являются одним из основных механизмов языка JavaScript; они охватывают ту
        область, которая в других языках программирования реализуется подпрограммами, процедурами и
        функциями. Функция в JavaScript&nbsp;— это набор операторов, выполняющих определенную задачу.</p>

      <p>Для того, чтобы пользоваться функцией, мы должны сначала ее определить. <em>Декларация функции</em>
        имеет вид:</p>

<pre class="syntax"><strong>function</strong> <em>имя</em>(<em>аргументы</em>?) {
  <em>операторы</em>
}</pre>

      <p>Здесь <em>имя</em>&nbsp;— идентификатор, задающий имя функции, <em>аргументы</em>&nbsp;—
        необязательный список идентификаторов, разделенных запятыми, который содержит имена формальных
        аргументов функции, а <em>операторы</em>&nbsp;— любой набор операторов, который называется
        телом функции и исполняется при ее вызове.</p>

      <p>Рассмотрим следующий пример:</p>

      <div class="code">
<pre class="code">function cube(number) {
  return number * number * number;
}</pre>
      </div>

      <p>Эта функция называется <tt>cube</tt> и имеет один формальный аргумент <tt>number</tt>. При
        вызове этой функции вместо формального аргумента подставляется его фактическое значение, функция
        выполняет возведение этого значения в куб и возвращает полученное число оператором <a href="#ref3684"><strong>return</strong></a>.</p>

      <p>Переменные, декларированные в теле функции, являются локальными, т.&nbsp;е. недоступны вне
        ее тела. Подробности см. в описании <a href="http://wdh.suncloud.ru/js02.htm#ref3252">области действия переменных</a>.</p>

      <h4><a name="ref3682">3.6.8.2. Вызов функции</a></h4>

      <p>Важно понимать, что появление декларации функции в тексте сценария не означает ее немедленного
        выполнения; тело функции будет выполняться только тогда, когда какой-либо оператор будет содержать
        <em>вызов </em>этой <em>функции</em>. Например, функция из предыдущего примера может быть вызвана
        так:</p>

      <div class="code">
<pre class="code">var x = cube(5);</pre>
      </div>

      <p>В результате переменная <tt>x</tt> получит значение 125.</p>

      <p>В JavaScript действуют следующие правила передачи аргументов функции:</p>
      <ul>
        <li>Аргументы <a href="http://wdh.suncloud.ru/js03.htm#ref33">примитивных типов</a> передаются функции <em>по значению</em>.
Иными словами, формальным аргументам присваиваются значения фактических
аргументов на момент вызова и, если даже операторы в теле функции
изменят значение какого-либо аргумента, то это изменение не коснется
переменной, чье значение передавалось в качестве аргумента.</li>
        <li>Объекты (и <a href="http://wdh.suncloud.ru/js08.htm#ref38">встроенные</a>, и <a href="http://wdh.suncloud.ru/js07.htm#ref37">определенные пользователем</a>) передаются
          <em>по ссылке</em>. Это означает, что все изменения свойств объекта в теле функции производятся непосредственно в самом объекте,
          а не в его локальной копии и, следовательно, сохраняются после возврата из функции. Например,</li>
      </ul>

      <div class="code">
<pre class="code">function setBrowser(browser) {
   browser.name = "Internet Explorer";
   browser.version = "5.5";
}

var myBrowser = {name:"Netscape Navigator", version:"4.7"};
var x = myBrowser.name;	// x равно "Netscape Navigator"
setBrowser(myBrowser);	// объект myBrowser передается функции
var y = myBrowser.name;	// y равно "Internet Explorer"</pre>
      </div>

      <h4><a name="ref3683">3.6.8.3. Рекурсивные функции</a></h4>

      <p>Важной особенностью языка JavaScript является то, что функция может вызывать не только другие
        функции, но и сама себя. Такие функции называются <em>рекурсивными</em>; во многих случаях использование
        рекурсии позволяет писать краткий код вместо сложных вложенных циклов. Следует, однако, учитывать,
        что рекурсия работает медленнее, чем обычный цикл, и пользоваться ей только в тех случаях, когда
        это действительно оправдано.</p>

      <p>Приведем пример функции, вычисляющей факториал числа (факториал числа n равен 1 * 2 * ... *
        n):</p>

      <div class="code">
<pre class="code">function factorial(n) {
  if (n &lt;= 1)
    return 1;
  else
    return (n * factorial(n-1));
}</pre>
      </div>

      <p>Неаккуратно написанная рекурсивная функция может войти в бесконечный цикл и никогда не вернуть
        результата. Например, попытка вычислить факториал отрицательного числа с помощью приведенной
        функции приведет именно к такому результату.</p>

      <h4><a name="ref3684">3.6.8.4. Оператор return</a></h4>

      <p>Мы видели в предыдущих примерах, что функции JavaScript могут (но не обязаны) возвращать значение.
        Для указания этого значения используется оператор <strong>return</strong>, который имеет две
        формы:</p>

<pre class="syntax"><strong>return</strong> <em>выражение</em>
<strong>return</strong></pre>

      <p>Первая форма оператора завершает выполнение функции и возвращает значение <em>выражения</em>.
        Функция, содержащая такой оператор <strong>return</strong>, должна вызываться как часть выражения
        присваивания, например <code>x&nbsp;=&nbsp;2&nbsp;*&nbsp;cube(a)</code>.</p>

      <p>Вторая форма оператора завершает выполнение функции и возвращает значение <strong>undefined</strong>.
        Функция, содержащая такой оператор <strong>return</strong>, должна вызываться как оператор,
        например <code>setBrowser(myBrowser)</code>.</p>

      <p>Если тело функции не содержит оператора <strong>return</strong>, то ее выполнение завершается
        с выполнением последнего оператора тела и возвращается значение <strong>undefined</strong>.</p>

      <h4><a name="ref3685">3.6.8.5. Объект arguments</a></h4>

      <p>При входе в тело функции создается локальный объект <strong>arguments</strong>, который имеет
        следующие свойства:</p>

      <ul>
        <li><a name="pcallee">Свойство <strong>callee</strong></a> с атрибутами { <a href="http://wdh.suncloud.ru/js07.htm#prop-attr">DontEnum</a>
          }. Начальным значением этого свойства является исполняемый в данный момент объект <strong>Function</strong>.
          Это свойство обеспечивает возможность рекурсивного вызова безымянных функций.</li>
        <li><a name="parguments-length">Свойство <strong>length</strong></a> с атрибутами { <a href="http://wdh.suncloud.ru/js07.htm#prop-attr">DontEnum</a>
          }. Начальным значением этого свойства является количество фактических аргументов, переданных
          функции при ее вызове.</li>
        <li><a name="parguments-indices">Массив значений фактических аргументов функции</a>. Для доступа
          к значениям массива используется синтаксис:
  <pre class="syntax"><em>функция</em>.<strong>arguments</strong>[i]</pre>

          <p class="noindent">где <em>функция</em>&nbsp;— идентификатор, задающий имя текущей функции,
            а <tt>i</tt>&nbsp;— номер аргумента, начиная с нуля.</p>
        </li>
      </ul>

      <p>Этот объект полезен в тех случаях, когда мы заранее не знаем количества аргументов, которые
        будут переданы данной функции. В следующем примере функция <tt>initArray</tt> создает новый
        массив и копирует в него список своих фактических аргументов.</p>

      <div class="code">
<pre class="code">function initArray() {
  this.length = initArray.arguments.length;
  for (var i = 0; i &lt; this.length; i++)
    this[i] = initArray.arguments[i];
}

var myFriends = new initArray("Михаил", "Максим", "Сергей", "Леонид");</pre>
      </div>

    </td></tr>
  <tr><td><div id="divFooter"><hr size="2"><table style="margin: 0pt;" border="0" cellpadding="0" cellspacing="0" height="24" width="100%"><tbody><tr><td align="left" width="33%"><a href="http://wdh.suncloud.ru/js05.htm"><img name="imgleftb" src="3.6.%20%CE%EF%E5%F0%E0%F2%EE%F0%FB%20%E8%20%F4%F3%ED%EA%F6%E8%E8_files/nnleft.gif" alt="" title="Регулярные выражения" onmouseover="showSelected(this)" onmouseout="showNormal(this)" border="0"></a></td><td align="center" width="34%"><a href="http://wdh.suncloud.ru/contents.htm"><img name="imgdownb" src="3.6.%20%CE%EF%E5%F0%E0%F2%EE%F0%FB%20%E8%20%F4%F3%ED%EA%F6%E8%E8_files/nndown.gif" alt="" title="Содержание" onmouseover="showSelected(this)" onmouseout="showNormal(this)" border="0"></a></td><td align="right" width="33%"><a href="http://wdh.suncloud.ru/js07.htm"><img name="imgrightb" src="3.6.%20%CE%EF%E5%F0%E0%F2%EE%F0%FB%20%E8%20%F4%F3%ED%EA%F6%E8%E8_files/nnright.gif" alt="" title="Использование объектов" onmouseover="showSelected(this)" onmouseout="showNormal(this)" border="0"></a></td></tr></tbody></table><hr size="2"><p style="margin: 0pt; text-indent: 0pt; text-align: center; font-family: arial,sans-serif; color: rgb(0, 0, 204);">Последнее изменение страницы: 13 мая 2002 г.</p></div></td></tr>
</tbody></table>
</body></html>